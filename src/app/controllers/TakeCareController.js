const TakeCare = require('../models/TakeCare');
const Table = require('../models/Table');
const User = require('../models/User');

exports.renderCreateTakeCare = async (req, res) => {
    try {
        const staffs = await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } });
        const tables = await Table.find({}, 'idTable'); 

        res.render('createTakeCare', { 
            layout: "layouts/mainAdmin",
            title: "T·∫°o l·ªãch l√†m",
            staffs,
            tables,
            errorMessage: null 
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i form t·∫°o TakeCare:", error);
        res.status(500).send("L·ªói khi t·∫£i form t·∫°o TakeCare");
    }
};

exports.createTakeCare = async (req, res) => {
    try {
        let { tableIds, staffId, date, startTime, endTime } = req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o c∆° b·∫£n
        if (!staffId || !date || !startTime || !endTime) {
            return res.render('createTakeCare', {
                layout: "layouts/mainAdmin",
                title: "T·∫°o TakeCare",
                staffs: await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } }),
                tables: await Table.find({}, 'idTable'),
                errorMessage: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin (nh√¢n vi√™n, ng√†y, gi·ªù b·∫Øt ƒë·∫ßu, gi·ªù k·∫øt th√∫c)."
            });
        }

        // X·ª≠ l√Ω tableIds: N·∫øu kh√¥ng c√≥ tableIds (cho KITCHENSTAFF ho·∫∑c RESMANAGER), g√°n m·∫£ng r·ªóng
        if (!tableIds) {
            tableIds = [];
        } else {
            // Chuy·ªÉn tableIds th√†nh array n·∫øu n√≥ l√† string (tr∆∞·ªùng h·ª£p ch·ªâ ch·ªçn 1 b√†n)
            if (!Array.isArray(tableIds)) {
                try {
                    tableIds = JSON.parse(tableIds);
                } catch (error) {
                    tableIds = [tableIds]; // N·∫øu JSON.parse l·ªói th√¨ √©p n√≥ th√†nh m·∫£ng
                }
            }
        }

        // Ki·ªÉm tra nh√¢n vi√™n c√≥ t·ªìn t·∫°i kh√¥ng v√† vai tr√≤ h·ª£p l·ªá
        const staffMember = await User.findById(staffId);
        if (!staffMember || !["WAITER", "KITCHENSTAFF", "RESMANAGER"].includes(staffMember.role)) {
            return res.render('createTakeCare', {
                layout: "layouts/mainAdmin",
                title: "T·∫°o TakeCare",
                staffs: await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } }),
                tables: await Table.find({}, 'idTable'),
                errorMessage: "Nh√¢n vi√™n kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng thu·ªôc vai tr√≤ WAITER, KITCHENSTAFF, ho·∫∑c RESMANAGER."
            });
        }

        // Ki·ªÉm tra n·∫øu vai tr√≤ l√† WAITER th√¨ ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt b√†n
        if (staffMember.role === "WAITER" && tableIds.length === 0) {
            return res.render('createTakeCare', {
                layout: "layouts/mainAdmin",
                title: "T·∫°o TakeCare",
                staffs: await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } }),
                tables: await Table.find({}, 'idTable'),
                errorMessage: "Nh√¢n vi√™n ph·ª•c v·ª• (WAITER) ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt b√†n."
            });
        }

        // Ki·ªÉm tra xem t·∫•t c·∫£ c√°c b√†n c√≥ t·ªìn t·∫°i kh√¥ng (n·∫øu c√≥ b√†n ƒë∆∞·ª£c ch·ªçn)
        if (tableIds.length > 0) {
            const tables = await Table.find({ idTable: { $in: tableIds } });
            if (tables.length !== tableIds.length) {
                return res.render('createTakeCare', {
                    layout: "layouts/mainAdmin",
                    title: "T·∫°o TakeCare",
                    staffs: await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } }),
                    tables: await Table.find({}, 'idTable'),
                    errorMessage: "M·ªôt ho·∫∑c nhi·ªÅu b√†n kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i."
                });
            }
        }

        const newTakeCare = new TakeCare({
            table: tableIds, // C·∫≠p nh·∫≠t danh s√°ch b√†n (c√≥ th·ªÉ l√† m·∫£ng r·ªóng n·∫øu kh√¥ng ch·ªçn b√†n)
            staff: staffMember._id,
            date,
            startTime,
            endTime,
        });

        await newTakeCare.save();
        return res.redirect('/admin/takeCare');
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o TakeCare:", error);
        return res.render('createTakeCare', {
            layout: "layouts/mainAdmin",
            title: "T·∫°o TakeCare",
            staffs: await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } }),
            tables: await Table.find({}, 'idTable'),
            errorMessage: "L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau."
        });
    }
};

exports.getTakeCares = async (req, res) => {
    try {
        console.log("üîÑ ƒêang l·∫•y danh s√°ch TakeCare...");

        // L·∫•y danh s√°ch TakeCare
        const takeCares = await TakeCare.find()
            .populate('staff'); // Ch·ªâ populate staff v√¨ table l√† array string

        // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c b√†n ƒë·ªÉ map idTable
        const tables = await Table.find({}, 'idTable'); // L·∫•y danh s√°ch t·∫•t c·∫£ b√†n
        const tableMap = new Map(tables.map(table => [table.idTable, table.idTable]));

        // C·∫≠p nh·∫≠t th√¥ng tin b√†n ƒë·ªÉ hi·ªÉn th·ªã ƒë√∫ng
        takeCares.forEach(tc => {
            tc.tableNames = tc.table.map(tId => tableMap.get(tId) || "Kh√¥ng c√≥ th√¥ng tin b√†n");
        });

        // Hi·ªÉn th·ªã danh s√°ch l·∫•y ƒë∆∞·ª£c
        console.log("‚úÖ L·∫•y th√†nh c√¥ng danh s√°ch TakeCare:");
        takeCares.forEach(tc => {
            console.log(`üÜî ID: ${tc._id}, B√†n: ${tc.tableNames.join(", ")}, Nh√¢n vi√™n: ${tc.staff ? tc.staff.firstName + " " + tc.staff.lastName : "Kh√¥ng c√≥ nh√¢n vi√™n"}`);
        });

        res.render('viewTakeCare', { 
            layout: "layouts/mainAdmin", 
            title: "Danh s√°ch l·ªãch l√†m",
            takeCares
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch TakeCare:", error);
        res.status(500).send("L·ªói khi l·∫•y danh s√°ch TakeCare.");
    }
};



exports.renderUpdateTakeCare = async (req, res) => {
    try {
        const { id } = req.params;

        // L·∫•y th√¥ng tin l·ªãch l√†m c·∫ßn c·∫≠p nh·∫≠t
        const takeCare = await TakeCare.findById(id)
            .populate('staff'); // Kh√¥ng populate 'table' v√¨ n√≥ l√† m·∫£ng string

        if (!takeCare) {
            console.warn(`‚ö†Ô∏è C·∫£nh b√°o: L·ªãch l√†m v·ªõi ID ${id} kh√¥ng t·ªìn t·∫°i.`);
            return res.render("errorpage", {
                message: "L·ªãch l√†m kh√¥ng t·ªìn t·∫°i.",
                layout: "layouts/mainAdmin",
            });
        }

        // L·∫•y danh s√°ch nh√¢n vi√™n thu·ªôc 3 vai tr√≤: WAITER, KITCHENSTAFF, RESMANAGER
        const staffs = await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } });

        // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c b√†n ƒë·ªÉ hi·ªÉn th·ªã dropdown ch·ªçn b√†n
        const tables = await Table.find({}, 'idTable');

        console.log(`‚úÖ ƒêang c·∫≠p nh·∫≠t l·ªãch l√†m: ID ${id}`);
        console.log(`üìå Nh√¢n vi√™n: ${takeCare.staff ? takeCare.staff.firstName + " " + takeCare.staff.lastName : "Kh√¥ng c√≥ nh√¢n vi√™n"}`);
        console.log(`üìå B√†n hi·ªán t·∫°i: ${takeCare.table ? takeCare.table.join(", ") : "Kh√¥ng c√≥ b√†n"}`);

        res.render('updateTakeCare', { 
            layout: "layouts/mainAdmin",
            title: "Ch·ªânh s·ª≠a l·ªãch l√†m",
            takeCare,
            staffs,
            tables, // Truy·ªÅn danh s√°ch b√†n v√†o form
            errorMessage: null 
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i form ch·ªânh s·ª≠a TakeCare:", error);
        res.status(500).send("L·ªói khi t·∫£i form ch·ªânh s·ª≠a TakeCare.");
    }
};


// H√†m x·ª≠ l√Ω c·∫≠p nh·∫≠t TakeCare
exports.updateTakeCare = async (req, res) => {
    try {
        const { id } = req.params;
        let { tableIds, staffId, date, startTime, endTime } = req.body;

        // ƒê·∫£m b·∫£o `tableIds` l√† m·ªôt m·∫£ng n·∫øu c√≥ nhi·ªÅu b√†n, ho·∫∑c g√°n m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥
        if (!tableIds) {
            tableIds = []; // G√°n m·∫£ng r·ªóng n·∫øu tableIds kh√¥ng ƒë∆∞·ª£c g·ª≠i
        } else if (!Array.isArray(tableIds)) {
            tableIds = [tableIds]; // Chuy·ªÉn th√†nh m·∫£ng n·∫øu ch·ªâ c√≥ m·ªôt b√†n
        }

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o c∆° b·∫£n
        if (!staffId || !date || !startTime || !endTime) {
            const takeCare = await TakeCare.findById(id).populate('table').populate('staff');
            const staffs = await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } });
            const tables = await Table.find({}, 'idTable'); // L·∫•y danh s√°ch b√†n
            return res.render('updateTakeCare', {
                layout: "layouts/mainAdmin",
                title: "Ch·ªânh s·ª≠a l·ªãch l√†m",
                takeCare,
                staffs,
                tables,
                errorMessage: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin (ng√†y, gi·ªù b·∫Øt ƒë·∫ßu, gi·ªù k·∫øt th√∫c, nh√¢n vi√™n)."
            });
        }

        // Ki·ªÉm tra nh√¢n vi√™n t·ªìn t·∫°i v√† vai tr√≤
        const staffMember = await User.findById(staffId);
        if (!staffMember || !["WAITER", "KITCHENSTAFF", "RESMANAGER"].includes(staffMember.role)) {
            const takeCare = await TakeCare.findById(id).populate('table').populate('staff');
            const staffs = await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } });
            const allTables = await Table.find({}, 'idTable');
            return res.render('updateTakeCare', {
                layout: "layouts/mainAdmin",
                title: "Ch·ªânh s·ª≠a l·ªãch l√†m",
                takeCare,
                staffs,
                tables: allTables,
                errorMessage: "Nh√¢n vi√™n kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng thu·ªôc vai tr√≤ WAITER, KITCHENSTAFF, ho·∫∑c RESMANAGER."
            });
        }

        // Ki·ªÉm tra n·∫øu vai tr√≤ l√† WAITER th√¨ ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt b√†n
        if (staffMember.role === "WAITER" && tableIds.length === 0) {
            const takeCare = await TakeCare.findById(id).populate('table').populate('staff');
            const staffs = await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } });
            const tables = await Table.find({}, 'idTable');
            return res.render('updateTakeCare', {
                layout: "layouts/mainAdmin",
                title: "Ch·ªânh s·ª≠a l·ªãch l√†m",
                takeCare,
                staffs,
                tables,
                errorMessage: "Nh√¢n vi√™n ph·ª•c v·ª• (WAITER) ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt b√†n."
            });
        }

        // Ki·ªÉm tra t·∫•t c·∫£ b√†n t·ªìn t·∫°i (n·∫øu c√≥ b√†n ƒë∆∞·ª£c ch·ªçn)
        if (tableIds.length > 0) {
            const tables = await Table.find({ idTable: { $in: tableIds } });
            if (tables.length !== tableIds.length) {
                const takeCare = await TakeCare.findById(id).populate('table').populate('staff');
                const staffs = await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } });
                const allTables = await Table.find({}, 'idTable');
                return res.render('updateTakeCare', {
                    layout: "layouts/mainAdmin",
                    title: "Ch·ªânh s·ª≠a l·ªãch l√†m",
                    takeCare,
                    staffs,
                    tables: allTables,
                    errorMessage: "M·ªôt ho·∫∑c nhi·ªÅu b√†n kh√¥ng t·ªìn t·∫°i. Vui l√≤ng nh·∫≠p ID b√†n h·ª£p l·ªá."
                });
            }
        }

        // C·∫≠p nh·∫≠t TakeCare
        const updatedTakeCare = await TakeCare.findByIdAndUpdate(
            id,
            {
                table: tableIds, // C·∫≠p nh·∫≠t danh s√°ch b√†n (c√≥ th·ªÉ l√† m·∫£ng r·ªóng n·∫øu kh√¥ng ch·ªçn b√†n)
                staff: staffMember._id,
                date,
                startTime,
                endTime,
            },
            { new: true } // Tr·∫£ v·ªÅ document ƒë√£ c·∫≠p nh·∫≠t
        );

        if (!updatedTakeCare) {
            return res.render("errorpage", {
                message: "L·ªãch l√†m kh√¥ng t·ªìn t·∫°i.",
                layout: "layouts/mainAdmin",
            });
        }

        console.log(`‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng l·ªãch l√†m v·ªõi ID: ${id}`);
        console.log(`üìå B√†n m·ªõi: ${tableIds.length > 0 ? tableIds.join(", ") : "Kh√¥ng c√≥ b√†n"}`);
        console.log(`üìå Nh√¢n vi√™n: ${staffMember.firstName} ${staffMember.lastName} (${staffMember.role})`);
        console.log(`üìå Ng√†y: ${date}`);
        console.log(`üìå Th·ªùi gian: ${startTime} - ${endTime}`);

        return res.redirect('/admin/takeCare');
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t TakeCare:", error);
        const takeCare = await TakeCare.findById(id).populate('table').populate('staff');
        const staffs = await User.find({ role: { $in: ["WAITER", "KITCHENSTAFF", "RESMANAGER"] } });
        const tables = await Table.find({}, 'idTable'); // L·∫•y danh s√°ch b√†n
        return res.render('updateTakeCare', {
            layout: "layouts/mainAdmin",
            title: "Ch·ªânh s·ª≠a l·ªãch l√†m",
            takeCare,
            staffs,
            tables,
            errorMessage: "L·ªói m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau."
        });
    }
};



exports.deleteTakeCare = async (req, res) => {
    try {
        const { id } = req.params;
        const takeCare = await TakeCare.findById(id);

        if (!takeCare) {
            return res.render("errorpage", {
                message: "L·ªãch l√†m kh√¥ng t·ªìn t·∫°i.",
                layout: "layouts/mainAdmin",
            });
        }

        await TakeCare.findByIdAndDelete(id);
        console.log(`‚úÖ X√≥a th√†nh c√¥ng l·ªãch l√†m v·ªõi ID: ${id}`);

        // Redirect to the takeCare list page without flash
        return res.redirect("/admin/takeCare");
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a l·ªãch l√†m:", error);
        return res.render("errorpage", {
            message: "L·ªói m√°y ch·ªß, kh√¥ng th·ªÉ x√≥a l·ªãch l√†m.",
            layout: "layouts/mainAdmin",
        });
    }
};

exports.getStaffSchedule = async (req, res) => {
    try {
        const { userId } = req.params; // L·∫•y userId t·ª´ params

        // Ki·ªÉm tra xem nh√¢n vi√™n c√≥ t·ªìn t·∫°i kh√¥ng
        const staff = await User.findById(userId);
        if (!staff) {
            console.log("‚ùå Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i:", userId);
            return res.render("errorpage", {
                message: "Nh√¢n vi√™n kh√¥ng t·ªìn t·∫°i",
                layout: "layouts/mainAdmin",
            });
        }

        // L·∫•y danh s√°ch l·ªãch l√†m c·ªßa nh√¢n vi√™n
        const takeCares = await TakeCare.find({ staff: userId })
            .populate('staff'); // Populate th√¥ng tin nh√¢n vi√™n

        // L·∫•y danh s√°ch t·∫•t c·∫£ c√°c b√†n ƒë·ªÉ map idTable
        const tables = await Table.find({}, 'idTable');
        const tableMap = new Map(tables.map(table => [table.idTable, table.idTable]));

        // C·∫≠p nh·∫≠t th√¥ng tin b√†n ƒë·ªÉ hi·ªÉn th·ªã
        takeCares.forEach(tc => {
            tc.tableNames = tc.table.map(tId => tableMap.get(tId) || "Kh√¥ng c√≥ th√¥ng tin b√†n");
        });

        console.log(`‚úÖ L·∫•y th√†nh c√¥ng l·ªãch l√†m c·ªßa nh√¢n vi√™n: ${staff.firstName} ${staff.lastName}`);
        takeCares.forEach(tc => {
            console.log(`üÜî ID: ${tc._id}, B√†n: ${tc.tableNames.join(", ")}, Ng√†y: ${tc.date}, Th·ªùi gian: ${tc.startTime} - ${tc.endTime}`);
        });

        res.render('viewStaffSchedule', {
            layout: "layouts/mainAdmin",
            title: "L·ªãch l√†m c·ªßa nh√¢n vi√™n",
            takeCares,
            staff // Truy·ªÅn th√¥ng tin nh√¢n vi√™n ƒë·ªÉ hi·ªÉn th·ªã t√™n
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y l·ªãch l√†m c·ªßa nh√¢n vi√™n:", error);
        return res.render("errorpage", {
            message: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i",
            layout: "layouts/mainAdmin",
        });
    }
};

exports.renderDetailTakeCare = async (req, res) => {
    try {
        const { id } = req.params;

        // L·∫•y th√¥ng tin l·ªãch l√†m c·∫ßn xem chi ti·∫øt
        const takeCare = await TakeCare.findById(id)
            .populate('staff'); 

        if (!takeCare) {
            console.warn(`‚ö†Ô∏è C·∫£nh b√°o: L·ªãch l√†m v·ªõi ID ${id} kh√¥ng t·ªìn t·∫°i.`);
            return res.render("errorpage", {
                message: "L·ªãch l√†m kh√¥ng t·ªìn t·∫°i.",
                layout: "layouts/mainAdmin",
            });
        }

        console.log(`‚úÖ ƒêang xem chi ti·∫øt l·ªãch l√†m: ID ${id}`);
        console.log(`üìå Nh√¢n vi√™n: ${takeCare.staff ? takeCare.staff.firstName + " " + takeCare.staff.lastName : "Kh√¥ng c√≥ nh√¢n vi√™n"}`);
        console.log(`üìå B√†n: ${takeCare.table ? takeCare.table.join(", ") : "Kh√¥ng c√≥ b√†n"}`);

        res.render('detailTakeCare', { 
            layout: "layouts/mainAdmin",
            title: "Chi ti·∫øt l·ªãch l√†m",
            takeCare
        });
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i trang chi ti·∫øt TakeCare:", error);
        res.status(500).send("L·ªói khi t·∫£i trang chi ti·∫øt TakeCare.");
    }
};


