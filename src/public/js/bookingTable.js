document.addEventListener("DOMContentLoaded", function () {
  const bookings = window.bookings || [];
  const restaurantInfor = window.restaurantInfor || [];
  const dateInput = document.getElementById("date");
  const timeInput = document.getElementById("time");
  const tablesContainer = document.querySelector(".table-list");
  const selectedTableInput = document.getElementById("selectedTableId");
  /** üïí Kh√¥ng cho ch·ªçn ng√†y trong qu√° kh·ª© */
  let today = new Date().toISOString().split("T")[0];
  dateInput.setAttribute("min", today);

  console.log(bookings);
  console.log(restaurantInfor);
  const openingHours = new Date(restaurantInfor.openingHours); // Chuy·ªÉn th√†nh ƒë·ªëi t∆∞·ª£ng Date

  // C·ªông th√™m 7 gi·ªù ƒë·ªÉ chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
  openingHours.setHours(openingHours.getUTCHours() + 7);

  const hours = String(openingHours.getHours()).padStart(2, "0"); // Gi·ªù VN
  const minutes = String(openingHours.getMinutes()).padStart(2, "0"); // Ph√∫t VN

  const timeOpening = `${hours}:${minutes}`;
  
  const closingHours = new Date(restaurantInfor.closingHours); // Chuy·ªÉn th√†nh ƒë·ªëi t∆∞·ª£ng Date

  // C·ªông th√™m 7 gi·ªù ƒë·ªÉ chuy·ªÉn sang m√∫i gi·ªù Vi·ªát Nam
  closingHours.setHours(closingHours.getUTCHours() + 7 - 3);

  const hoursClose = String(closingHours.getHours()).padStart(2, "0"); // Gi·ªù VN
  const minutesClose = String(closingHours.getMinutes()).padStart(2, "0"); // Ph√∫t VN

  const timeClosing = `${hoursClose}:${minutesClose}`;


  /** üïí C·∫≠p nh·∫≠t min cho gi·ªù khi ch·ªçn ng√†y */
  dateInput.addEventListener("change", function () {
    const selectedDate = new Date(dateInput.value);
    console.log(selectedDate.toDateString())
    const now = new Date();
    console.log(now.toDateString())
console.log(selectedDate.toDateString() === now.toDateString());

    const timeInput = document.getElementById("time");
    // Tr·ª´ 3 ti·∫øng
    let minTime = new Date();
    minTime.setHours(now.getHours() + 1);

    // N·∫øu gi·ªù sau khi tr·ª´ < 00:00 th√¨ ƒë·∫∑t v·ªÅ 00:00
    if (minTime.getHours() < 0) {
      minTime.setHours(0, 0);
    }
    console.log( minTime.toTimeString().slice(0, 5));
    
    if (selectedDate.toDateString() === now.toDateString()) {
        const minValue = minTime < openingHours ? minTime.toTimeString().slice(0, 5) : timeOpening;
        timeInput.setAttribute("min", minValue);
        timeInput.setAttribute("max", timeClosing);
    } else {
        timeInput.setAttribute("min", timeOpening);
        timeInput.setAttribute("max", timeClosing);
    }

    updateTableStatus();
  });

  /** üè∑Ô∏è C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n d·ª±a tr√™n ng√†y & gi·ªù ƒë√£ ch·ªçn */
  function updateTableStatus() {
    const selectedDate = dateInput.value;
    const selectedTime = timeInput.value;

    if (!selectedDate || !selectedTime) return;

    const selectedDateTime = new Date(`${selectedDate}T${selectedTime}`);
    console.log(selectedDateTime);

    document.querySelectorAll(".table-card").forEach((table) => {
      const tableId = table.getAttribute("data-table-id");
      const statusDiv = table.querySelector(".table-status");

      const isReserved = bookings.some((booking) => {
        if (booking.table.toString() !== tableId) return false;

        const bookedDateTime = new Date(booking.orderDate);

        // Tr·ª´ ƒëi 7 gi·ªù b·∫±ng c√°ch s·ª≠ d·ª•ng getTime()
        const adjustedBookedDateTime = new Date(
          bookedDateTime.getTime() - 7 * 60 * 60 * 1000
        );

        const timeDiff = Math.abs(
          (selectedDateTime - adjustedBookedDateTime) / (1000 * 60 * 60)
        );

        return timeDiff < 3; // N·∫øu ch√™nh l·ªách d∆∞·ªõi 3 gi·ªù th√¨ b√†n ƒë√£ ƒë·∫∑t
      });

      if (isReserved) {
        statusDiv.textContent = "ƒê√£ ƒë·∫∑t tr∆∞·ªõc";
        statusDiv.className = "table-status reserved";
        table.classList.add("disabled");
      } else {
        statusDiv.textContent = "C√≥ s·∫µn";
        statusDiv.className = "table-status available";
        table.classList.remove("disabled");
      }
    });
  }

  /** üéØ X·ª≠ l√Ω ch·ªçn b√†n */
  function selectTable(selectedTable) {
    const selectedDate = dateInput.value;
    const selectedTime = timeInput.value;

    if (!selectedDate || !selectedTime) {
      alert("Vui l√≤ng ch·ªçn ng√†y v√† gi·ªù tr∆∞·ªõc khi ch·ªçn b√†n!");
      return;
    }

    document.querySelectorAll(".table-card").forEach((table) => {
      table.classList.remove("selected");
    });

    selectedTable.classList.add("selected");
    selectedTableInput.value = selectedTable.getAttribute("data-table-id");
    console.log("B√†n ƒë∆∞·ª£c ch·ªçn:", selectedTableInput.value);
  }

  /** üñ±Ô∏è X·ª≠ l√Ω ch·ªçn b√†n (Event Delegation) */
  tablesContainer.addEventListener("click", function (event) {
    const selectedTable = event.target.closest(".table-card");
    if (selectedTable && !selectedTable.classList.contains("disabled")) {
      selectTable(selectedTable);
    }
  });

  // G√°n s·ª± ki·ªán onchange cho input ng√†y & gi·ªù
  dateInput.addEventListener("change", updateTableStatus);
  timeInput.addEventListener("change", updateTableStatus);

  // G·ªçi l·∫ßn ƒë·∫ßu khi trang load ƒë·ªÉ disable b√†n n·∫øu c·∫ßn
  updateTableStatus();
});
